import bcrypt
from telebot import types
from datetime import datetime, timedelta
from database import (
    register_or_verify_user,
    check_user_exists,
    get_user_notifications,
    get_user_archive,
    delete_notification_by_id,
    delete_archive_by_notify_id,
    get_notification_by_id,
    update_notification_text,
    update_notification_time,
    restore_from_archive,
    get_archive_item_by_id
)
from config import WEB_SERVER_URL


def register_handlers(bot):
    @bot.message_handler(commands=['start'])
    def handle_start(message):
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"
        if check_user_exists(user_id):
            show_main_menu(bot, message)
        else:
            request_password(bot, message, user_id, username)

    @bot.message_handler(commands=['help'])
    def handle_help(message):
        help_text = (
            "üõ† *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è!\n\n"
            "üîπ */start* - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "üîπ */help* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"
        )
        bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

    @bot.message_handler(func=lambda m: m.text == "üìù –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    def handle_create_notification(message):
        user_id = message.from_user.id
        if check_user_exists(user_id):
            show_notification_form(bot, message, user_id)
        else:
            bot.send_message(message.chat.id, "üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

    @bot.message_handler(func=lambda m: m.text == "üìã –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    def handle_view_notifications(message):
        user_id = message.from_user.id
        if not check_user_exists(user_id):
            bot.send_message(message.chat.id, "üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            types.KeyboardButton("üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ"),
            types.KeyboardButton("üóÉ –ê—Ä—Ö–∏–≤"),
            types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
        )
        bot.send_message(message.chat.id, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=markup)

    @bot.message_handler(func=lambda m: m.text == "üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ")
    def handle_active_notifications(message):
        user_id = message.from_user.id
        notifications = get_user_notifications(user_id)

        if not notifications:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            return

        for notify_id, text, notify_time in notifications:
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn_edit = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{notify_id}")
            btn_delete = types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_active_{notify_id}")
            markup.add(btn_edit, btn_delete)

            bot.send_message(
                message.chat.id,
                f"‚è∞ *{notify_time.strftime('%d.%m.%Y %H:%M')}*\n{text}",
                parse_mode='Markdown',
                reply_markup=markup
            )

    @bot.message_handler(func=lambda m: m.text == "üóÉ –ê—Ä—Ö–∏–≤")
    def handle_archive_notifications(message):
        user_id = message.from_user.id
        archive_items = get_user_archive(user_id)

        if not archive_items:
            bot.send_message(message.chat.id, "üì≠ –í–∞—à –∞—Ä—Ö–∏–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç.")
            return

        for notify_id, text, notify_time, send_id in archive_items:
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn_restore = types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"restore_{send_id}")
            btn_delete = types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_archive_{send_id}")
            markup.add(btn_restore, btn_delete)

            bot.send_message(
                message.chat.id,
                f"‚è∞ *{notify_time.strftime('%d.%m.%Y %H:%M')}*\n{text}",
                parse_mode='Markdown',
                reply_markup=markup
            )

    @bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
    def handle_back(message):
        show_main_menu(bot, message)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('delete_active_'))
    def handle_delete_active(call):
        notify_id = int(call.data.split('_')[2])
        if delete_notification_by_id(notify_id):
            bot.answer_callback_query(call.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
            bot.delete_message(call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('delete_archive_'))
    def handle_delete_archive(call):
        send_id = int(call.data.split('_')[2])
        if delete_archive_by_notify_id(send_id):
            bot.answer_callback_query(call.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∞—Ä—Ö–∏–≤–∞.")
            bot.delete_message(call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('restore_'))
    def handle_restore_notification(call):
        send_id = int(call.data.split('_')[1])
        new_notify_id = restore_from_archive(send_id)

        if new_notify_id:
            bot.answer_callback_query(call.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!")
            bot.delete_message(call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('edit_') and
                                                  not call.data.startswith('edit_text_') and
                                                  not call.data.startswith('edit_time_'))
    def handle_edit_notification(call):
        notify_id = int(call.data.split('_')[1])
        notification = get_notification_by_id(notify_id)

        if not notification:
            bot.answer_callback_query(call.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚úèÔ∏è –¢–µ–∫—Å—Ç", callback_data=f"edit_text_{notify_id}"),
            types.InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è", callback_data=f"edit_time_{notify_id}"),
            types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_active_{notify_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_{notify_id}")
        )

        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('edit_text_'))
    def handle_edit_text(call):
        notify_id = int(call.data.split('_')[2])
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
        bot.delete_message(call.message.chat.id, call.message.message_id)

        msg = bot.send_message(call.message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, lambda m: process_text_step(m, notify_id))

    def process_text_step(message, notify_id):
        if update_notification_text(notify_id, message.text):
            notification = get_notification_by_id(notify_id)
            if notification:
                bot.send_message(
                    message.chat.id,
                    f"‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:\n‚è∞ {notification[2].strftime('%d.%m.%Y %H:%M')}\nüìù {message.text}",
                    parse_mode='Markdown'
                )
            else:
                bot.send_message(message.chat.id, "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('edit_time_'))
    def handle_edit_time(call):
        notify_id = int(call.data.split('_')[2])
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è")
        bot.delete_message(call.message.chat.id, call.message.message_id)

        msg = bot.send_message(
            call.message.chat.id,
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.2023 23:59"
        )
        bot.register_next_step_handler(msg, lambda m: process_time_step(m, notify_id))

    def process_time_step(message, notify_id):
        try:
            new_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            if update_notification_time(notify_id, new_time):
                notification = get_notification_by_id(notify_id)
                if notification:
                    bot.send_message(
                        message.chat.id,
                        f"‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n‚è∞ {new_time.strftime('%d.%m.%Y %H:%M')}\nüìù {notification[1]}",
                        parse_mode='Markdown'
                    )
                else:
                    bot.send_message(message.chat.id, "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
            bot.register_next_step_handler(message, lambda m: process_time_step(m, notify_id))

    @bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_edit_'))
    def handle_cancel_edit(call):
        notify_id = int(call.data.split('_')[2])
        bot.answer_callback_query(call.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

        notification = get_notification_by_id(notify_id)
        if notification:
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn_edit = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{notify_id}")
            btn_delete = types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_active_{notify_id}")
            markup.add(btn_edit, btn_delete)

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"‚è∞ *{notification[2].strftime('%d.%m.%Y %H:%M')}*\n{notification[1]}",
                reply_markup=markup,
                parse_mode='Markdown'
            )


def request_password(bot, message, user_id, username):
    msg = bot.send_message(message.chat.id, "üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")
    bot.register_next_step_handler(msg, lambda m: check_password(bot, m, user_id, username))


def check_password(bot, message, user_id, username):
    from config import PASSWORD_HASH
    try:
        user_input = message.text.encode('utf-8')
        if bcrypt.checkpw(user_input, PASSWORD_HASH):
            if register_or_verify_user(user_id, username):
                bot.send_message(
                    message.chat.id,
                    "‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\nüöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NotificationAPP! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –Ω–∞–ø–æ–º–Ω—é –æ –Ω–∏—Ö –∑–∞—Ä–∞–Ω–µ–µ. ",
                    parse_mode='Markdown'
                )
                show_main_menu(bot, message)
            else:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            request_password(bot, message, user_id, username)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def show_notification_form(bot, message, user_id):
    web_app = types.WebAppInfo(url=f"{WEB_SERVER_URL}/form/{user_id}")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_web = types.KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É", web_app=web_app)
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn_web, btn_back)
    bot.send_message(
        message.chat.id,
        "üìã –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=markup
    )


def show_main_menu(bot, message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
        types.KeyboardButton("üìã –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    )
    bot.send_message(
        message.chat.id,
        "üì± *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*",
        reply_markup=markup,
        parse_mode='Markdown'
    )